version: '3.8'

services:
  app:
    image: fireflyiii/core:latest
    restart: always
    volumes:
      - firefly_iii_upload:/var/www/html/storage/upload
    env_file: .env
#    ports:
#      - 80:8080
    depends_on:
      - db
    networks:
      - proxy
      - internal
    labels:
      - "traefik.http.routers.fireflyiii.entrypoints=web,websecure"
      - 'traefik.http.routers.fireflyiii.rule=Host(`${FRONTEND_RULE}`)'
      - "traefik.http.services.fireflyiii.loadbalancer.server.port=8080"
      - 'traefik.enable=true'
  db:
    image: mariadb:10
    restart: always
    environment:
      - MYSQL_RANDOM_ROOT_PASSWORD=yes
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
    networks:
      - internal
    volumes:
      - firefly_iii_db:/var/lib/mysql
  restic:
    container_name: restic
    image: mazzolino/restic
    hostname: docker
    environment:
      BACKUP_CRON: ${RESTIC_BACKUP_CRON}
      RESTIC_REPOSITORY: b2:${B2_BUCKET_NAME}:/restic
      RESTIC_PASSWORD: ${RESTIC_PASSWORD}
      RESTIC_BACKUP_SOURCES: /source
      B2_ACCOUNT_ID: ${B2_KEY_ID}
      B2_ACCOUNT_KEY: ${B2_APP_KEY}
    volumes:
        - firefly_iii_upload:/source/upload
        - firefly_iii_db_backup:/source/db_backup
  mysql-cron-backup:
    container_name: software_fireflyiii_db_backuper
    image: fradelg/mysql-cron-backup
    networks:
      - internal
    depends_on:
      - db
    volumes:
      - firefly_iii_db_backup:/backup
    environment:
      - MYSQL_HOST=${DB_HOST}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASS=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MAX_BACKUPS=${MAX_BACKUPS}
      - INIT_BACKUP=1
      - CRON_TIME=${MYSQL_BACKUP_CRON}
      - GZIP_LEVEL=9 # High compression level
#  fidi:
#    image: fireflyiii/data-importer:latest
#    restart: always
#    env_file: .fidi.env
#    networks:
#      - proxy
#      - internal
#    labels:
#      - "traefik.http.routers.fireflyiiifidi.entrypoints=web,websecure"
#      - 'traefik.http.routers.fireflyiiifidi.rule=Host(`${FRONTEND_RULE_FIDI}`)'
#      - "traefik.http.services.fireflyiiifidi.loadbalancer.server.port=8080"
#      - 'traefik.enable=true'
##    ports:
##      - 8081:8080
#    depends_on:
#      - app
#  firefly-bot:
#    image: vjfalk1/firefly-telegram-bot:latest
#    environment:
#      - TELEGRAM_BOT_TOKEN=xxxxxx
#    volumes:
#      - ../telegram_bot/config:/config
#    networks:
#      - proxy
#      - internal
#    labels:
#      - "traefik.http.routers.fireflybot.entrypoints=web,websecure"
#      - 'traefik.http.routers.fireflybot.rule=Host(`${TRAEFIK_FRONTEND_RULE}`) && (PathPrefix(`/api`) || PathPrefix(`/telegram`))'
#      - "traefik.http.services.fireflybot.loadbalancer.server.port=8080"
#      - 'traefik.enable=true'

volumes:
  firefly_iii_upload:
  firefly_iii_db:
  firefly_iii_db_backup:

networks:
  proxy:
    name: ${PROXY_NAME}
    external: true
  internal:
    driver: bridge
